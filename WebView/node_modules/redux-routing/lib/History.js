'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _actions = require('./actions');

var _constants = require('./constants');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var History = function () {
  function History(store) {
    _classCallCheck(this, History);

    this.store = store;
  }

  _createClass(History, [{
    key: 'listen',
    value: function listen() {
      var _this = this;

      window.addEventListener('popstate', function (event) {
        var state = event.state;


        if (typeof state === 'string') {
          _this.onPopHref(state);
        }
      }, false);
    }
  }, {
    key: 'update',
    value: function update(action) {
      var href = this.getCurrentHref();

      if (action.type === _constants.NAVIGATE) {
        if (href && action.href !== href) {
          this.pushHref(action.href);
        }
      } else if (action.type === _constants.REPLACE) {
        if (href && action.href !== href) {
          this.replaceHref(action.href);
        }
      }
    }
  }, {
    key: 'pushHref',
    value: function pushHref(href) {
      window.history.pushState(href, null, href);
    }
  }, {
    key: 'replaceHref',
    value: function replaceHref(href) {
      window.history.replaceState(href, null, href);
    }
  }, {
    key: 'onPopHref',
    value: function onPopHref(href) {
      this.store.dispatch((0, _actions.replace)(href));
    }
  }, {
    key: 'getCurrentHref',
    value: function getCurrentHref() {
      return window.history.state;
    }
  }]);

  return History;
}();

exports.default = History;