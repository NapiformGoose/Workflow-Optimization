// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Storage;

namespace Storage.Migrations
{
    [DbContext(typeof(WorkflowOpimizationDBContext))]
    [Migration("20191113144841_Add QuantityInStock")]
    partial class AddQuantityInStock
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ModelsLibrary.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaterialTypeId");

                    b.Property<int>("Quantity")
                        .HasMaxLength(10);

                    b.Property<int?>("ShopId");

                    b.Property<int?>("WorkingDayId");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("ShopId");

                    b.HasIndex("WorkingDayId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("ModelsLibrary.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("QuantityInStock");

                    b.HasKey("Id");

                    b.ToTable("MaterialType");
                });

            modelBuilder.Entity("ModelsLibrary.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Quantity")
                        .HasMaxLength(10);

                    b.Property<int>("ServiceTypeId");

                    b.Property<int?>("ShopId");

                    b.Property<int?>("WorkingDayId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("ShopId");

                    b.HasIndex("WorkingDayId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("ModelsLibrary.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("ModelsLibrary.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("ModelsLibrary.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("WorkerTypeId");

                    b.Property<int>("WorkingDayId");

                    b.HasKey("Id");

                    b.HasIndex("WorkerTypeId");

                    b.HasIndex("WorkingDayId");

                    b.ToTable("Worker");
                });

            modelBuilder.Entity("ModelsLibrary.WorkerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("WorkerType");
                });

            modelBuilder.Entity("ModelsLibrary.WorkingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.HasKey("Id");

                    b.ToTable("WorkingDay");
                });

            modelBuilder.Entity("ModelsLibrary.Material", b =>
                {
                    b.HasOne("ModelsLibrary.MaterialType", "MaterialType")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ModelsLibrary.Shop", "Shop")
                        .WithMany("Materials")
                        .HasForeignKey("ShopId");

                    b.HasOne("ModelsLibrary.WorkingDay", "WorkingDay")
                        .WithMany("Materials")
                        .HasForeignKey("WorkingDayId");
                });

            modelBuilder.Entity("ModelsLibrary.Service", b =>
                {
                    b.HasOne("ModelsLibrary.ServiceType", "ServiceTypes")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ModelsLibrary.Shop", "Shop")
                        .WithMany("Services")
                        .HasForeignKey("ShopId");

                    b.HasOne("ModelsLibrary.WorkingDay", "WorkingDay")
                        .WithMany("Services")
                        .HasForeignKey("WorkingDayId");
                });

            modelBuilder.Entity("ModelsLibrary.Worker", b =>
                {
                    b.HasOne("ModelsLibrary.WorkerType", "WorkerTypes")
                        .WithMany("Workers")
                        .HasForeignKey("WorkerTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ModelsLibrary.WorkingDay", "WorkingDay")
                        .WithMany("Workers")
                        .HasForeignKey("WorkingDayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
